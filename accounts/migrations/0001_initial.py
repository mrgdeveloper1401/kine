# Generated by Django 5.0.1 on 2024-01-10 11:25

import django.contrib.auth.validators
import django.db.models.deletion
import django_jalali.db.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('common', '0002_alter_createat_create_at'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notofication',
            fields=[
                ('createat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.createat')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('body', models.TextField(verbose_name='Body')),
            ],
            options={
                'verbose_name': 'notification',
                'verbose_name_plural': 'notifications',
                'db_table': 'notifications',
            },
            bases=('common.createat',),
        ),
        migrations.CreateModel(
            name='OtpCode',
            fields=[
                ('createat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.createat')),
                ('code', models.PositiveIntegerField()),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'otp code',
                'verbose_name_plural': 'otp code',
                'db_table': 'otp_codes',
            },
            bases=('common.createat',),
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('createat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='common.createat')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('update_at', django_jalali.db.models.jDateTimeField(auto_now=True, null=True)),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='delete user')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='deleted at')),
                ('random_active_code', models.CharField(blank=True, editable=False, max_length=72, null=True, verbose_name='random active code')),
                ('image', models.ImageField(blank=True, height_field='height_image', null=True, upload_to='images/user/%Y/%M/%d', verbose_name='image', width_field='width_image')),
                ('width_image', models.IntegerField(blank=True, null=True, verbose_name='width')),
                ('height_image', models.IntegerField(blank=True, null=True, verbose_name='height')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('common.createat', models.Model),
        ),
    ]
